{"version":3,"sources":["Deck.js","LoginForms.js","App.js","serviceWorker.js","index.js"],"names":["Deck","props","useState","card","setCard","deckId","setDeck_id","count","setCount","convertToNumber","numStr","Number","useEffect","a","console","log","axios","get","deckResult","data","deck_id","deckUser","className","length","map","c","idx","cardPosition","style","src","image","player","onClick","alert","resultCard","cards","value","resultCardValueString","drawCard","LoginForm","initial_state","name","formData","setFormData","handleChange","evt","target","fData","onSubmit","preventDefault","setIsLoggedIn","setPlayer1","player1","setPlayer2","player2","id","type","placeholder","onChange","App","isLoggedIn","LoginForms","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ff970602.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\"; \nimport axios from \"axios\";\nimport \"./Deck.css\"; \n\n\nfunction Deck(props){\n    const [card, setCard] = useState([]); \n    const [deckId, setDeck_id] = useState(''); \n\n\n    \n\n    const url = \"https://deckofcardsapi.com/api/deck/\"; \n    const [count, setCount] = useState(0); \n    useEffect(function(){\n        async function deckUser(){\n            console.log('running useEffect******')\n            const deckResult = await axios.get(\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\"); \n            setDeck_id(deckResult.data.deck_id); \n        }\n        deckUser()\n        \n    }, []); \n\n    function convertToNumber(numStr) {\n        if(numStr === \"JACK\" || numStr === \"QUEEN\" || numStr === \"KING\" ){\n            return 10; \n        } else if (numStr === \"ACE\"){\n            return (count + 11 <=21 ? 11 : 1)\n        } else {\n      return Number(numStr);\n    }\n}\n   \n\n    const handleClick = () => {\n        if( count > 21){\n            return alert (\"You lose!\")\n        } else if (count === 21) {\n            return alert (\"You win!\")\n        }\n\n\n        async function drawCard() {\n            console.log('deckId...', deckId)\n            const resultCard = await axios.get(`https://deckofcardsapi.com/api/deck/${deckId}/draw/`);\n            console.log('count...', resultCard.data.cards[0].value); \n            const resultCardValueString = resultCard.data.cards[0].value;\n            setCount(count => count + convertToNumber(resultCardValueString)); \n            // setCard(resultCard.data); \n            setCard(card => [...card, resultCard.data.cards[0]]); \n            console.log('cards array before update...', card)\n            console.log('resultCard.data...', resultCard.data.cards[0])\n        }\n        drawCard()\n    }\n    function displayCards(){\n        // console.log('this is the current card...', card)\n        // if(card.remaining === 0){\n        //     return alert(\"No more cards!\"); \n        // } \n        // const cardD = card.cards[0];\n        \n        return (\n          <div>\n              {/* <img src={cardD.image} />\n              <p>Count: {cardD.value}</p> */}\n                {card.map((c, idx) => {\n                    const cardPosition = {'left': (idx * 50) + 'px'}\n                    return (\n                      <li style={cardPosition} className={'card-display'}><img src={c.image}/> \n                      </li>\n                    )\n                })}\n                \n          </div>\n        )\n    }\n  \n    return (\n        <div>\n      \n            <div className ='getCard'>{card.length !== 0 && displayCards()} </div>\n            <div className ='display'>\n            <h1> Hello {props.player} </h1>\n\n            <p> Count: {count}</p>\n            <button className='button' onClick={handleClick}>New Card</button>\n     \n            {/* <div className ='getCard'>{card.length !== 0 && displayCards()} </div> */}\n            </div>\n        </div>\n    )\n}\nexport default Deck;\n\n","import React, { useState } from \"react\"; \nimport axios from \"axios\";\nimport \"./LoginForm.css\"; \n\n\nfunction LoginForm(props){\n    // const [playerName, setPlayerName] = useState(props.player); \n    const initial_state = { player: \"\", name:\"\"}\n    const [formData, setFormData] = useState(initial_state);\n\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        setFormData(initial_state)\n        props.setIsLoggedIn(true)\n        props.setPlayer1(formData.player1)\n        props.setPlayer2(formData.player2)\n        // props.setPlayer(playerName)\n        // props.setPlayerIsReady(true); \n    };\n\n    const handleChange = evt => {\n    //   setPlayerName(evt.target.value)\n        const {name, value} = evt.target;\n        setFormData(fData => ({...fData, [name]: value }))\n    }\n\n    return (\n       <form onSubmit={handleSubmit}>\n    \n            <h1>Black Jack Game</h1>\n            \n            <div className='input'>\n                <input\n                    id=\"player1\"\n                    type=\"text\"\n                    name=\"player1\"\n                    placeholder=\"Enter Player 1 Name\"\n                    value={formData.player1}\n                    onChange={handleChange}\n                />\n            </div>\n            <div className='input'>\n                <input\n                    id=\"player2\"\n                    type=\"text\"\n                    name=\"player2\"\n                    placeholder=\"Enter Player 2 Name\"\n                    value={formData.player2}\n                    onChange={handleChange}\n                />\n            </div>\n            <button type=\"submit\" className='buttons'>Start Game</button>\n    </form>\n    )\n}\n\nexport default LoginForm;\n\n","import React, {useState}from 'react';\nimport Deck from \"./Deck\"\nimport LoginForms from \"./LoginForms\"\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [player1, setPlayer1] = useState('')\n  const [player2, setPlayer2] = useState('')\n\n\n  const renderLoggedIn = ()=>{\n    if(isLoggedIn === false ){\n      return  <div>\n          <LoginForms \n          setIsLoggedIn={setIsLoggedIn} \n          setPlayer1={setPlayer1}\n          setPlayer2={setPlayer2}\n          /> \n      </div>\n    } else{\n      return <div>\n        <div><Deck player={player1} /></div>\n        <div><Deck player={player2} /></div>\n      </div>\n    }\n  }\n\n  // }\nreturn ( \n  <div>\n    {/* {<LoginForms/> ? <LoginForms/> : <Deck2/> } */}\n   {/* {createBox}  */}\n   {renderLoggedIn()}\n   {/* <LoginForms/>  */}\n   {/* <Deck2/> */}\n  </div>\n\n);\n}\n\nexport default App;\n\n\n\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}